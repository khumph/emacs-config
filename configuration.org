* Packages

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("GNU ELPA"     . "http://elpa.gnu.org/packages/")
          ("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("MELPA Stable" . 10)
          ("GNU ELPA"     . 5)
          ("MELPA"        . 0)))
    (package-initialize)
    (setq package-selected-packages
       (quote (flyspell org-bullets helm telephone-line evil)))
#+END_SRC

* Emacs preferences

Sensible defaults
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
#+END_SRC

Font, font size
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    (add-to-list 'default-frame-alist '(font . "Fira Mono-14")))
  (when (string-equal system-type "windows-nt")
    (add-to-list 'default-frame-alist '(font . "Consolas-14")))
#+END_SRC

General Emacs GUI settings
#+BEGIN_SRC emacs-lisp
  ;; Wrap lines at window edge
  (global-visual-line-mode t)

  ;; disable automatically inserting newlines
  (auto-fill-mode -1)
  (remove-hook 'text-mode-hook #'turn-on-auto-fill)

  ;; disable alarm bell
  (setq ring-bell-function 'ignore)

  ;; Disable the splash screen (to enable it agin, replace the t with 0)
  (setq inhibit-splash-screen t)

  ;; Disable the tool bar
  (tool-bar-mode -1)

  ;; Disable scroll bar
  (scroll-bar-mode -1)

  ;; remove fringes
  (fringe-mode -1)
#+END_SRC

Make whitespace-mode use just basic coloring
All numbers are Unicode codepoint in decimal. (insert-char 182 1)
#+BEGIN_SRC emacs-lisp
  (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark)))
  (setq whitespace-display-mappings
    '(
      (space-mark 32 [183] [46]) ; 32 SPACE 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
      (newline-mark 10 [182 10]) ; 10 LINE FEED
      (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
    ))
  (custom-set-faces
    '(whitespace-space ((t (:foreground "lightgray")))))
#+END_SRC

Set file to open at startup
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'org-agenda-list)
#+END_SRC

Move backups to a separate folder, automatically delete
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
    )
#+END_SRC

Encoding, use hex for unicode characters
#+BEGIN_SRC emacs-lisp
  (setq read-quoted-char-radix '16)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

** General Key bindings

Ensure command key mapped to super (s)
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    (setq mac-command-modifier 'super))
#+END_SRC

cmd-= increases text size, cmd-- decreases cmd-0 sets it back to original size
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    (define-key global-map (kbd "s-0") 'sensible-defaults/reset-text-size)
    (define-key global-map (kbd "s-=") 'text-scale-increase)
    (define-key global-map (kbd "s--") 'text-scale-decrease))
  (when (string-equal system-type "windows-nt")
    (define-key global-map (kbd "C-0") 'sensible-defaults/reset-text-size)
    (define-key global-map (kbd "C-=") 'text-scale-increase)
    (define-key global-map (kbd "C--") 'text-scale-decrease)
    (define-key global-map (kbd "M-<f4>") 'save-buffers-kill-emacs)
    (define-key global-map (kbd "C-s") 'save-buffer))
    (define-key isearch-mode-map [escape] 'isearch-abort)   ;; isearch
    (define-key isearch-mode-map "\e" 'isearch-abort)       ;; \e seems to work better for terminals
    (global-set-key [escape] 'keyboard-escape-quit)         ;; everywhere else
#+END_SRC

* Spelling

#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    (setq ispell-program-name "/usr/local/bin/aspell"))
  (when (string-equal system-type "gnu/linux")
    (setq ispell-program-name "/usr/bin/aspell"))
  (when (string-equal system-type "windows-nt")
    (setq ispell-program-name "C:/Users/kyleh/Documents/emacs/hunspell/bin/hunspell.exe"))

  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))

  (dolist (mode '(emacs-lisp-mode-hook
                  inferior-lisp-mode-hook))
    (add-hook mode
              '(lambda ()
                 (flyspell-prog-mode))))

  (global-set-key (kbd "<f8>") 'ispell-word)
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word))
  (global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)

  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
       (define-key flyspell-mouse-map [mouse-3] #'undefined)))
#+END_SRC

* Helm

Enable helm
#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (require 'helm-config)

  (helm-autoresize-mode 1)
  (helm-mode 1)
#+END_SRC

Set helm key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x r b") 'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x C-b") 'helm-for-files)
  (global-set-key (kbd "C-x b") 'helm-for-files)
  (when (string-equal system-type "darwin")
    (global-set-key (kbd "s-t") 'helm-for-files))
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z") 'helm-select-action) ; list actions using C-z
#+END_SRC

Other helm settings
#+BEGIN_SRC emacs-lisp
  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

  ;; limit max number of matches displayed for speed
  (setq helm-candidate-number-limit 100)

  ;; ignore boring files like .o and .a
  (setq helm-ff-skip-boring-files t)

  ;; replace locate with spotlight on Mac
  (when (string-equal system-type "darwin")
    (setq helm-locate-command "mdfind -onlyin ~ -name %s %s")
    (setq helm-locate-fuzzy-match nil))
#+END_SRC

* Evil

Use evil
#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode 1)
#+END_SRC

Define C-u as up
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-insert-state-map (kbd "C-u")
    (lambda ()
      (interactive)
      (evil-delete (point-at-bol) (point))))
#+END_SRC

* telephone line

#+BEGIN_SRC emacs-lisp
  (require 'telephone-line)
  (telephone-line-evil-config)
   (setq telephone-line-lhs
         '((evil   . (telephone-line-evil-tag-segment))
           (accent . (telephone-line-vc-segment
                      telephone-line-erc-modified-channels-segment
                      telephone-line-process-segment))
           (nil    . (telephone-line-minor-mode-segment
                      telephone-line-buffer-segment))))
   (setq telephone-line-rhs
         '((nil    . (telephone-line-misc-info-segment))
           (accent . (telephone-line-major-mode-segment))
          (evil   . (telephone-line-airline-position-segment))))
  (setq telephone-line-subseparator-faces '())
  (setq telephone-line-height 20)
  (telephone-line-mode t)
#+END_SRC

* Org mode

Org mode look and feel settings
#+BEGIN_SRC emacs-lisp
  ;; Use pretty bullets
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
  ;; Hide leading stars
  (setq org-hide-leading-stars t)

  ;; Use a downward arrow instead of ellipsis
  (setq org-ellipsis "\u2935")

  ;; Indent lines according to outline structure
  (setq org-startup-indented t)

  ;; Tab will indent code in org SRC blocks
  (setq org-src-tab-acts-natively t)
#+END_SRC

Todo words, set default [[https://orgmode.org/org.html#Setting-tags][tags]], put tags right next to TODO
#+BEGIN_SRC emacs-lisp
  (when (or (string-equal system-type "darwin") (string-equal system-type "gnu/linux"))
    (setq org-tag-alist '((:startgroup . nil)
                         ("fusion" . ?f) ("home" . ?h) ("out" . ?o) ("work" . ?w)
                         (:endgroup . nil)
                         (:startgroup . nil)
                         ("shallow" . ?s) ("deep" . ?d) ("event" . ?e)
                         (:endgroup . nil))))
  (when (string-equal system-type "windows-nt")
    (setq org-tag-alist '((:startgroup . nil)
                         ("home" . ?h) ("out" . ?o) ("work" . ?w)
                         (:endgroup . nil)
                         (:startgroup . nil)
                         ("shallow" . ?s) ("deep" . ?d) ("event" . ?e)
                         (:endgroup . nil))))
  (setq org-tags-column 0)
  (setq org-todo-keywords
    '((sequence "TODO(t!)" "|" "DONE(d)")
      (sequence "WAIT(w@/!)" "MAYBE(m!)" "|")
      (sequence "|" "KILL(c@)")))
#+END_SRC

Omit non-US Holidays
#+BEGIN_SRC emacs-lisp
  (setq holiday-bahai-holidays nil)
  (setq holiday-hebrew-holidays nil)
  (setq holiday-islamic-holidays nil)
#+END_SRC

Set file locations
#+BEGIN_SRC emacs-lisp
  (when (or (string-equal system-type "darwin") (string-equal system-type "gnu/linux"))
    (setq org-agenda-files (list "~/Dropbox/org"))
    (setq org-archive-location '"~/Documents/org-archive/%s_archive.org::datetree/* Archived Tasks"))
  (when (string-equal system-type "windows-nt")
    (setq org-agenda-files (list "C:/Users/kyleh/org"))
    (setq org-archive-location '"C:/Users/kyleh/org/archive/a-%s::datetree/* Archived Tasks"))
  #+END_SRC

Org mode key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "\C-c l") 'org-store-link)
  (global-set-key (kbd "\C-c a") 'org-agenda)
  (global-set-key (kbd "\C-c c") 'org-capture)
  (global-set-key (kbd "\C-c b") 'org-iswitchb)
#+END_SRC

Have org-agenda take up whole window
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/org-checklist.el")
  (setq org-agenda-window-setup 'current-window)
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-show-future-repeats 'next)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
#+END_SRC
